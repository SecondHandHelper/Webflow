{"mappings":"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","sources":["<anon>","userManagement.js"],"sourcesContent":["(function () {\nfunction $58f89bb86a1e398e$var$getParameterByName(name) {\n    const paramsObj = getParamsObject();\n    return paramsObj[name];\n}\n// Get the action to complete\nconst $58f89bb86a1e398e$var$mode = $58f89bb86a1e398e$var$getParameterByName(\"mode\");\nconst $58f89bb86a1e398e$var$actionCode = $58f89bb86a1e398e$var$getParameterByName(\"oobCode\");\nconst $58f89bb86a1e398e$var$continueUrl = $58f89bb86a1e398e$var$getParameterByName(\"continueUrl\");\nconst $58f89bb86a1e398e$var$lang = $58f89bb86a1e398e$var$getParameterByName(\"lang\");\nvar $58f89bb86a1e398e$var$accountEmail;\n// Handle the user management action.\nswitch($58f89bb86a1e398e$var$mode){\n    case \"resetPassword\":\n        // Display reset password handler and UI.\n        $58f89bb86a1e398e$var$handleResetPassword(auth, $58f89bb86a1e398e$var$actionCode, $58f89bb86a1e398e$var$continueUrl, $58f89bb86a1e398e$var$lang);\n        break;\n    case \"recoverEmail\":\n        // Display email recovery handler and UI.\n        $58f89bb86a1e398e$var$handleRecoverEmail(auth, $58f89bb86a1e398e$var$actionCode, $58f89bb86a1e398e$var$lang);\n        break;\n    case \"verifyEmail\":\n        // Display email verification handler and UI.\n        $58f89bb86a1e398e$var$handleVerifyEmail(auth, $58f89bb86a1e398e$var$actionCode, $58f89bb86a1e398e$var$continueUrl, $58f89bb86a1e398e$var$lang);\n        break;\n    case \"sendEmailVerification\":\n        // Display email verification handler and UI.\n        $58f89bb86a1e398e$var$sendEmailVerification(auth);\n        break;\n    default:\n}\n// [START auth_handle_reset_password]\nfunction $58f89bb86a1e398e$var$handleResetPassword(auth1, actionCode, continueUrl, lang) {\n    // Localize the UI to the selected language as determined by the lang\n    // parameter.\n    // Verify the password reset code is valid.\n    auth1.verifyPasswordResetCode(actionCode).then((email)=>{\n        $58f89bb86a1e398e$var$accountEmail = email;\n        // TODO: Show the reset screen with the user's email and ask the user for\n        // the new password.\n        accountEmailText.innerHTML = `Email: ${$58f89bb86a1e398e$var$accountEmail}`;\n        resetPasswordDiv.style.display = \"block\";\n        loadingDiv.style.display = \"none\";\n    }).catch((error)=>{\n        errorHandler.report(error);\n        console.log(error.code, error.message);\n    });\n}\n// [END auth_handle_reset_password]\n// [START auth_handle_recover_email]\nfunction $58f89bb86a1e398e$var$handleRecoverEmail(auth1, actionCode, lang) {\n    // Localize the UI to the selected language as determined by the lang\n    // parameter.\n    var restoredEmail = null;\n    // Confirm the action code is valid.\n    auth1.checkActionCode(actionCode).then((info)=>{\n        // Get the restored email address.\n        restoredEmail = info[\"data\"][\"email\"];\n        // Revert to the old email.\n        return auth1.applyActionCode(actionCode);\n    }).then(()=>{\n        // Account email reverted to restoredEmail\n        // TODO: Display a confirmation message to the user.\n        // You might also want to give the user the option to reset their password\n        // in case the account was compromised:\n        auth1.sendPasswordResetEmail(restoredEmail).then(()=>{\n        // Password reset confirmation sent. Ask user to check their email.\n        }).catch((error)=>{\n            errorHandler.report(error);\n        // Error encountered while sending password reset code.\n        });\n    }).catch((error)=>{\n        errorHandler.report(error);\n    // Invalid code.\n    });\n}\n// [END auth_handle_recover_email]\n// [START auth_handle_verify_email]\nfunction $58f89bb86a1e398e$var$handleVerifyEmail(auth1, actionCode, continueUrl, lang) {\n    // Localize the UI to the selected language as determined by the lang\n    // parameter.\n    // Try to apply the email verification code.\n    auth1.applyActionCode(actionCode).then((resp)=>{\n        // Email address has been verified.\n        // Show confirmation.\n        emailVerifiedDiv.style.display = \"block\";\n        loadingDiv.style.display = \"none\";\n        toMaiButton.style.display = \"block\";\n    }).catch((error)=>{\n        errorHandler.report(error);\n        emailVerificationFailedDiv.style.display = \"block\";\n        loadingDiv.style.display = \"none\";\n    // Code is invalid or expired. Ask the user to verify their email address\n    // again.\n    });\n}\n// [END auth_handle_verify_email]\nfunction $58f89bb86a1e398e$var$sendEmailVerification(auth1) {\n    auth1.onAuthStateChanged((user)=>{\n        if (user) emailVerificationText.innerHTML = `Klicka på länken i mailet vi skickat till ${user.email} för att verifiera din email.`;\n        verifyEmailDiv.style.display = \"block\";\n        loadingDiv.style.display = \"none\";\n        setCookie(\"viewedVerifyEmailDiv\", \"true\", 2);\n    });\n}\nsendEmailVerificationButton.addEventListener(\"click\", function sendEmail() {\n    firebase.auth().currentUser.sendEmailVerification().then(()=>{\n        // Email verification sent!\n        emailSentDiv.style.display = \"block\";\n        sendEmailVerificationButton.style.display = \"none\";\n        setTimeout(function showButton() {\n            toMaiButton.style.display = \"block\";\n            closeVerifyEmailButton.style.display = \"none\";\n        }, 10000);\n    });\n});\nsavePasswordAndLoginButton.addEventListener(\"click\", function() {\n    // Save the new password.\n    passwordLoadIcon.style.display = \"block\";\n    savePasswordAndLoginButton.style.display = \"none\";\n    var password = newPassword.value;\n    auth.confirmPasswordReset($58f89bb86a1e398e$var$actionCode, password).then((resp)=>{\n        console.log(\"Password reset has been confirmed and new password updated\");\n        // Sign in\n        firebase.auth().signInWithEmailAndPassword($58f89bb86a1e398e$var$accountEmail, password).then((userCredential)=>{\n            location.href = \"./private\";\n        }).catch((error)=>{\n            errorHandler.report(error);\n            console.log(\"Error message:\", error.code, error.message);\n        });\n    }).catch((error)=>{\n        errorHandler.report(error);\n        console.log(\"Error message:\", error.code, error.message);\n    });\n});\n\n})();\n//# sourceMappingURL=userManagement.js.map\n","function getParameterByName(name) {\n  const paramsObj = getParamsObject();\n  return paramsObj[name];\n}\n\n// Get the action to complete\nconst mode = getParameterByName('mode');\nconst actionCode = getParameterByName('oobCode');\nconst continueUrl = getParameterByName('continueUrl');\nconst lang = getParameterByName('lang');\nvar accountEmail;\n\n// Handle the user management action.\nswitch (mode) {\n  case 'resetPassword':\n    // Display reset password handler and UI.\n    handleResetPassword(auth, actionCode, continueUrl, lang);\n    break;\n  case 'recoverEmail':\n    // Display email recovery handler and UI.\n    handleRecoverEmail(auth, actionCode, lang);\n    break;\n  case 'verifyEmail':\n    // Display email verification handler and UI.\n    handleVerifyEmail(auth, actionCode, continueUrl, lang);\n    break;\n  case 'sendEmailVerification':\n    // Display email verification handler and UI.\n    sendEmailVerification(auth);\n    break;\n  default:\n  // Error: invalid mode.\n}\n\n// [START auth_handle_reset_password]\nfunction handleResetPassword(auth, actionCode, continueUrl, lang) {\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n\n  // Verify the password reset code is valid.\n  auth.verifyPasswordResetCode(actionCode).then((email) => {\n    accountEmail = email;\n    // TODO: Show the reset screen with the user's email and ask the user for\n    // the new password.\n    accountEmailText.innerHTML = `Email: ${accountEmail}`;\n    resetPasswordDiv.style.display = 'block';\n    loadingDiv.style.display = 'none';\n  }).catch((error) => {\n    errorHandler.report(error);\n    console.log(error.code, error.message);\n  });\n}\n// [END auth_handle_reset_password]\n\n// [START auth_handle_recover_email]\nfunction handleRecoverEmail(auth, actionCode, lang) {\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n  var restoredEmail = null;\n  // Confirm the action code is valid.\n  auth.checkActionCode(actionCode).then((info) => {\n    // Get the restored email address.\n    restoredEmail = info['data']['email'];\n\n    // Revert to the old email.\n    return auth.applyActionCode(actionCode);\n  }).then(() => {\n    // Account email reverted to restoredEmail\n\n    // TODO: Display a confirmation message to the user.\n\n    // You might also want to give the user the option to reset their password\n    // in case the account was compromised:\n    auth.sendPasswordResetEmail(restoredEmail).then(() => {\n      // Password reset confirmation sent. Ask user to check their email.\n    }).catch((error) => {\n      errorHandler.report(error);\n      // Error encountered while sending password reset code.\n    });\n  }).catch((error) => {\n    errorHandler.report(error);\n    // Invalid code.\n  });\n}\n// [END auth_handle_recover_email]\n\n// [START auth_handle_verify_email]\nfunction handleVerifyEmail(auth, actionCode, continueUrl, lang) {\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n  // Try to apply the email verification code.\n  auth.applyActionCode(actionCode).then((resp) => {\n    // Email address has been verified.\n    // Show confirmation.\n    emailVerifiedDiv.style.display = 'block';\n    loadingDiv.style.display = 'none';\n    toMaiButton.style.display = 'block';\n  }).catch((error) => {\n    errorHandler.report(error);\n    emailVerificationFailedDiv.style.display = 'block';\n    loadingDiv.style.display = 'none';\n    // Code is invalid or expired. Ask the user to verify their email address\n    // again.\n  });\n}\n// [END auth_handle_verify_email]\n\nfunction sendEmailVerification(auth) {\n  auth.onAuthStateChanged((user) => {\n    if (user) {\n      emailVerificationText.innerHTML = `Klicka på länken i mailet vi skickat till ${user.email} för att verifiera din email.`;\n    }\n    verifyEmailDiv.style.display = 'block';\n    loadingDiv.style.display = 'none';\n    setCookie('viewedVerifyEmailDiv', 'true', 2);\n  });\n}\n\nsendEmailVerificationButton.addEventListener('click', function sendEmail() {\n  firebase.auth().currentUser.sendEmailVerification()\n    .then(() => {\n      // Email verification sent!\n      emailSentDiv.style.display = 'block';\n      sendEmailVerificationButton.style.display = 'none';\n      setTimeout(function showButton() {\n        toMaiButton.style.display = 'block';\n        closeVerifyEmailButton.style.display = 'none';\n      }, 10000);\n    });\n});\n\nsavePasswordAndLoginButton.addEventListener('click', function () {\n  // Save the new password.\n  passwordLoadIcon.style.display = 'block';\n  savePasswordAndLoginButton.style.display = 'none';\n  var password = newPassword.value;\n  auth.confirmPasswordReset(actionCode, password).then((resp) => {\n    console.log(\"Password reset has been confirmed and new password updated\");\n    // Sign in\n    firebase.auth().signInWithEmailAndPassword(accountEmail, password)\n      .then((userCredential) => {\n        location.href = './private';\n      })\n      .catch((error) => {\n        errorHandler.report(error);\n        console.log(\"Error message:\", error.code, error.message);\n      });\n  }).catch((error) => {\n    errorHandler.report(error);\n    console.log(\"Error message:\", error.code, error.message);\n  });\n});\n"],"names":["$58f89bb86a1e398e$var$accountEmail","$58f89bb86a1e398e$var$getParameterByName","name","paramsObj","getParamsObject","$58f89bb86a1e398e$var$mode","$58f89bb86a1e398e$var$actionCode","$58f89bb86a1e398e$var$handleResetPassword","auth1","actionCode","continueUrl","lang","verifyPasswordResetCode","then","email","accountEmailText","innerHTML","resetPasswordDiv","style","display","loadingDiv","catch","error","errorHandler","report","console","log","code","message","auth","$58f89bb86a1e398e$var$continueUrl","$58f89bb86a1e398e$var$lang","$58f89bb86a1e398e$var$handleRecoverEmail","restoredEmail","checkActionCode","info","applyActionCode","sendPasswordResetEmail","$58f89bb86a1e398e$var$handleVerifyEmail","resp","emailVerifiedDiv","toMaiButton","emailVerificationFailedDiv","$58f89bb86a1e398e$var$sendEmailVerification","onAuthStateChanged","user","emailVerificationText","verifyEmailDiv","setCookie","sendEmailVerificationButton","addEventListener","firebase","currentUser","sendEmailVerification","emailSentDiv","setTimeout","closeVerifyEmailButton","savePasswordAndLoginButton","passwordLoadIcon","password","newPassword","value","confirmPasswordReset","signInWithEmailAndPassword","userCredential","location","href"],"version":3,"file":"userManagement.js.map"}